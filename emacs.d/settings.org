* common settings
** Ubiquitous Packages which should be loaded on startup rather than autoloaded on demand since they are likely to be used in every session.
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'cl-lib)
  (require 'saveplace)
  (require 'ffap)
  (require 'uniquify)
  (require 'ansi-color)
  (require 'recentf)
#+END_SRC

** enable IDO
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-save-directory-list-file "~/.emacs.d/.ido.last")
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(setq ido-show-dot-for-dired t)
(setq ido-default-buffer-method 'selected-window)
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
(global-set-key (kbd "C-x B") 'ibuffer)
#+END_SRC

** auto revert mode
-  whenever an external process changes a file underneath emacs, and there was no unsaved changes in the corresponding buffer, just revert its content to reflect what's on-disk.
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** clipboard
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

** display settings
#+BEGIN_SRC emacs-lisp
;; on to the visual settings
(global-visual-line-mode 1)
(line-number-mode 1)			; have line numbers and
(column-number-mode 1)			; column numbers in the mode line

(tool-bar-mode -1)			; no tool bar with icons
(scroll-bar-mode -1)			; no scroll bars
(unless (string-match "apple-darwin" system-configuration)
  ;; on mac, there's always a menu bar drown, don't have it empty
  (menu-bar-mode -1))

;; choose your own fonts, in a system dependant way
(if (string-match "apple-darwin" system-configuration)
    (set-face-font 'default "Monaco-13")
  (set-face-font 'default "Monospace-10"))

(global-linum-mode 1)			; add line numbers on the left

;; avoid compiz manager rendering bugs
(add-to-list 'default-frame-alist '(alpha . 100))
(when (string-match "apple-darwin" system-configuration)
  (setq mac-allow-anti-aliasing t))
#+END_SRC

** start emacs server
#+BEGIN_SRC emacs-lisp
;; start emacs server
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

** org mode setting
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)

; set default directory
(setq org-directory "~/org/")
(setq org-agenda-files '("~/org/"))
(setq org-default-notes-file (concat org-directory "/index.org"))
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-ca" 'org-agenda)
; set todo keyword
(setq org-todo-keywords
'((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_SRC
*** org capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
'(("z" "Zonar Todo" entry (file+headline "~/org/zonar.org" "Tasks")
	"* TODO %?\n  %i\n  %a" :prepend t)
("o" "Org Todo" entry (file+headline "~/org/org.org" "Tasks")
	"* TODO %?\n  %i\n  %a" :prepend t)
("c" "Zonar Todo" entry (file+headline "~/org/cargo.org" "Tasks")
	"* TODO %?\n  %i\n  %a" :prepend t)))
#+END_SRC
* packages
** use-package
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
(require 'bind-key)
#+END_SRC

** theme
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
 :defer t
 :init (load-theme 'spacemacs-light t))
#+END_SRC

** evil mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  :config
  (require 'evil)
  (evil-mode t))
#+END_SRC

*** evil leader
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :init
  :config
  (require 'evil-leader)
  (global-evil-leader-mode))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** autocomplete
*** company mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init (global-company-mode))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

** elixir
#+BEGIN_SRC emacs-lisp
(use-package alchemist) 
#+END_SRC
